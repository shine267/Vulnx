import nmap
from metasploit.msfrpc import MsfRpcClient
import subprocess
import os
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from jinja2 import Template
import boto3
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(_name_)

class VulnX:
    def _init_(self):
        self.nm = nmap.PortScanner()
        self.msf_client = self._connect_to_msf()

    def _connect_to_msf(self):
        try:
            msf_password = os.environ.get('MSF_PASSWORD')
            if not msf_password:
                raise ValueError("MSF_PASSWORD environment variable not set")
            return MsfRpcClient(msf_password, ssl=True)
        except Exception as e:
            logger.error(f"Failed to connect to MSF: {e}")
            raise

    def network_scan(self, target):
        try:
            self.nm.scan(target, '1-1024')
            return self.nm.csv()
        except Exception as e:
            logger.error(f"Network scan failed: {e}")
            return None

    def exploit(self, exploit_name, payload_name, target):
        try:
            exploit = self.msf_client.modules.use('exploit', exploit_name)
            exploit['RHOST'] = target
            payload = self.msf_client.modules.use('payload', payload_name)
            exploit.execute(payload=payload)
        except Exception as e:
            logger.error(f"Exploit failed: {e}")

    def password_cracking(self, hash_file, cracker='john'):
        try:
            if cracker == 'john':
                result = subprocess.run(['john', '--format=NT', hash_file], capture_output=True, text=True)
                if result.returncode != 0:
                    logger.error(f"Password cracking failed: {result.stderr}")
            elif cracker == 'hashcat':
                result = subprocess.run(['hashcat', '-m', '1000', hash_file, 'wordlist.txt'], capture_output=True, text=True)
                if result.returncode != 0:
                    logger.error(f"Password cracking failed: {result.stderr}")
        except Exception as e:
            logger.error(f"Password cracking failed: {e}")

    def train_model(self, X, y):
        try:
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
            model = RandomForestClassifier()
            model.fit(X_train, y_train)
            return model.score(X_test, y_test)
        except Exception as e:
            logger.error(f"Model training failed: {e}")
            return None

    def generate_report(self, findings):
        try:
            template = Template("Scan results: {{ results }}")
            report = template.render(results=findings)
            with open('report.txt', 'w') as f:
                f.write(report)
        except Exception as e:
            logger.error(f"Report generation failed: {e}")

def main():
    vulnx = VulnX()
    while True:
        print("1. Network Scan")
        print("2. Exploit")
        print("3. Password Cracking")
        print("4. Train Model")
        print("5. Generate Report")
        print("6. Quit")
        choice = input("Choose an option: ")
        if choice == "1":
            target = input("Enter target IP: ")
            result = vulnx.network_scan(target)
            if result:
                print(result)
        elif choice == "2":
            exploit_name = input("Enter exploit name: ")
            payload_name = input("Enter payload name: ")
            target = input("Enter target IP: ")
            vulnx.exploit(exploit_name, payload_name, target)
        elif choice == "3":
            hash_file = input("Enter hash file: ")
            cracker = input("Enter cracker (john/hashcat): ")
            vulnx.password_cracking(hash_file, cracker)
        elif choice == "4":
            # Train model logic here
            pass
        elif choice == "5":
            findings = input("Enter findings: ")
            vulnx.generate_report(findings)
        elif choice == "6":
            break
        else:
            print("Invalid choice")

if _name_ == "_main_":
    main()
